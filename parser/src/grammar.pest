// TODO: add a "new type" for identifier used only when types are expected

// Once WHITESPACE is defined, pest allows arbitrary whitespace between tokens 
WHITESPACE = _{ (" " | NEWLINE) }

// Silenced so that error messages show up as "expected identifier"
// instead of "expected alpha"
// TODO: add underline
alpha = _{ 'a'..'z' | 'A'..'Z' | "_" }
digit = { '0'..'9' }
arrow = { "->" }
hex = _{ '0'..'9' | 'a'..'f' | 'A'..'F' }
unicode_hex = { hex{1, 6} }
predefined = { "n" | "r" | "t" | "\\" | "0" | "\"" | "'" }
byte       = { "x" ~ hex{2} }
unicode    = { "u" ~ "{" ~ unicode_hex ~ "}" }
escape     = { "\\" ~ (predefined | byte | unicode) }

// A valid identifier must not start with a digit
identifier = @{ alpha ~ (alpha | digit)* }

// An integer consists of one or more digits
// TODO: add support for underlines?
integer = @{
    ASCII_DIGIT+
}

// A float is two integers joined by a dot
float = {
    integer ~ "." ~ integer
}

num = { float | digit }

// A boolean value.
// Either true or false
boolean = _{
    True | False
}
    True = { "true" }
    False = { "false" }

boolean_op = _{ and | or }
    and = { "and" }
    or = { "or" }

// A boolean expression: either a boolean value or a boolean operation
// TODO: allow for variables in boolean expressions
boolean_expr = {
    boolean_term ~ (boolean_op ~ boolean_term)*
}

// A boolean term is either a boolean value (true or false)
// or a value that can be reduced to a boolean value (a boolean expression)
boolean_term = _{
    boolean | "(" ~ boolean_expr ~ ")" 
}

math_op = _{ add | subtract | multiply | divide | power }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }


math_expr = { math_term ~ (math_op ~ math_term)* }
math_term = _{ num | "(" ~ math_expr ~ ")" }

// Any value that would be acceptable in a Cacau string or char
// char_value = _{
//     LETTER |
//     MARK |
//     NUMBER |
//     PUNCTUATION |
//     SYMBOL |
//     SEPARATOR |
//     OTHER
// }

// A char of the form 'x', where x is any value in char_value
char = { 
    "'" ~ (escape | ANY) ~ "'" 
}

raw_string = { (!("\\" | "\"") ~ ANY)+ }

// A string (sequence of characters), of the form "x.." where x is any value in char_value 
string = { 
    "\"" ~ (raw_string | escape)* ~ "\""
}

statement = {
    string
    | boolean_expr
    | math_expr
    | char
    | float
    | integer
    | boolean
    | assignment
}

expression = {
    "{" ~ expression ~ "}"
    | statement ~ ";"
    | statement
}

// A Cacau program
program = {
    SOI ~
    expression+ ~
    EOI
}

// Type annotation of the form ": type_name"
type_annotation = { ":" ~ identifier }

// Binding a value to a name.
// May or may not contain a type annotation
// E.g.:
//     let x = "hey there"
//     let x: string = "hey there"
assignment = {
	"let" ~ identifier ~ type_annotation? ~ "=" ~ expression
}

// An argument for a function
// E.g.
//     x: int
//     name: string
function_argument = {
	identifier ~ type_annotation
}

// The return type for a function
// E.g.
//     -> bool
//     -> int
function_return = {
	arrow ~ identifier
}

// A variant of an enum
// E.g.
//     Password(ZeroableString)
//     Boolean(bool)
enum_variant = {
    identifier ~ "(" ~ identifier ~ ")" | identifier
}

/// A definition of an enum
///
/// E.g.
///     pub enum NameOrId { Name(string), Id(Uuid) }
///     enum MaybeString { Some(string), None }
enum_definition = {
    "pub"? ~ "enum" ~ identifier ~ "{" ~ (enum_variant ~ ",")* ~ enum_variant? ~ "}"
}

// The declaration of a function (without its body)
// E.g.:
//    fn main
//    pub fn multiply x: int, y: int -> int
//    fn is_even n: int -> bool
function_declaration = {
  "pub"? ~ "fn" ~ identifier ~ (function_argument ~ ",")* ~ function_argument? ~ function_return?
}

// A field of a struct
// E.g.
//     pub username: string
//     age: int
struct_field = {
    "pub"? ~ identifier ~ ":" ~ identifier
}

// A definition of a struct
// E.g.
//     pub struct User { pub username: string, age: int, birth_date: Date }
struct_definition = {
    "pub"? ~ "struct" ~ identifier ~ "{" ~ (struct_field ~ ",")* ~ struct_field? ~ "}"
}