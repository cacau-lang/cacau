// Once WHITESPACE is defined, pest allows arbitrary whitespace between tokens 
WHITESPACE = _{ (" " | NEWLINE) }

// Silenced so that error messages show up as "expected identifier"
// instead of "expected alpha"
// TODO: add underline
alpha = _{ 'a'..'z' | 'A'..'Z' | "_" }
digit = { '0'..'9' }
arrow = { "->" }

// A valid identifier must not start with a digit
identifier = @{ alpha ~ (alpha | digit)* }

// An integer consists of one or more digits
// TODO: add support for underlines?
integer = @{
    ASCII_DIGIT+
}

// A float is two integers joined by a dot
float = {
    integer ~ "." ~ integer
}

// A boolean value.
// Either true or false
boolean = {
    "true" | "false"
}

// Any value that would be acceptable in a Cacau string or char
char_value = _{
    LETTER |
    MARK |
    NUMBER |
    PUNCTUATION |
    SYMBOL |
    SEPARATOR |
    OTHER
}

// A char of the form 'x', where x is any value in char_value
char = {
    "'" ~ char_value ~ "'"
}

// A string (sequence of characters), of the form "x.." where x is any value in char_value 
string = {
    "\"" ~ char_value* ~ "\""
}

expression = { integer }

// Type annotation of the form ": type_name"
type_annotation = { ":" ~ identifier }

// Binding a value to a name.
// May or may not contain a type annotation
// E.g.:
//     let x = "hey there"
//     let x: string = "hey there"
assignment = {
	"let" ~ identifier ~ type_annotation? ~ "=" ~ expression
}

// An argument for a function
// E.g.
//     x: int
//     name: string
function_argument = {
	identifier ~ type_annotation
}

// The return type for a function
// E.g.
//     -> bool
//     -> int
function_return = {
	arrow ~ identifier
}

// The declaration of a function (without its body)
// E.g.:
//    fn main
//    pub fn multiply x: int, y: int -> int
//    fn is_even n: int -> bool
function_declaration = {
  "pub"? ~ "fn" ~ identifier ~ (function_argument ~ ",")* ~ function_argument? ~ function_return?
}

file = {
    SOI ~
    (float | integer)+ ~
    EOI
}